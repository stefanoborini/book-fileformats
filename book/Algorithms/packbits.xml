<sect2><title>PackBits</title>

<para>Packbits is a variation of Run Length Encoding aiming at reducing the
cost of two symbol repetitions. The idea is to classify two kind of data:
encoded with a Run Length Encoding scheme, and non-encoded data to be
interpreted verbatim. To differentiate between the two kinds, a single signed
byte $n$ is used as both a flag and a counter:</para>
<itemizedlist>
  <listitem><para>if <parameter>n</parameter> is a positive between 0 and 127: use the following 1 + <parameter>n</parameter> symbols as they are (verbatim)</para></listitem>
  <listitem><para>if <parameter>n</parameter> is a negative number between -127 and -1: repeat the next symbol 1 - <parameter>n</parameter> times. (Run Length Encoding)</para></listitem>
  <listitem><para>if <parameter>n</parameter> is -128, ignore the value. This is implementation-dependent, but generally this value is never generated by the encoder</para></listitem>
</itemizedlist>

<para>The algorithm operates by accumulating buffers of symbols, which get normally
written as verbatim. When a run of more than three bytes is found during the
scan, the encoding is performed until a non matching byte interrupts the encoding.</para>
 
<para>As an example, consider the following case:</para>
<programlisting>
aaabcdaaaabcdeffffffffff -> -2a     : 1 - (-2) = 3  repetitions of "a"
                             2bcd   : 1 +   2  = 3  verbatim data "bcd"
                            -3a     : 1 - (-3) = 4  repetitions of "a"
                             3bcde  : 1 + 3    = 4  verbatim data "bcde"
                            -9f     : 1 - (-9) = 10 repetitions of "f"
</programlisting>
<para>leading to a reduction from 24 bytes to 15 bytes.</para>
</sect2>
